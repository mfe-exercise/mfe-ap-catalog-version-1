{
  "name": "Cyclic Dependency",
  "category": "Inter-frontend",
  "problem": {
    "text": "Two or more MFEs directly or indirectly depend on each other, resulting in high coupling between screens and fragments, compromising MFEs' independence and modularity. Thus, changes in one MFE require coordination with the others. Circular dependencies lead to challenges in a system's maintenance and evolution, compromising agility and the ability to scale developments efficiently.",
    "image": "",
    "description": ""
  },
  "example": {
      "text": "Consider an e-commerce platform with a payment screen implemented in one mfe. This screen contains a fragment from another mfe used to calculate the shipping cost. When the screen displays changes to the items in the cart, the fragment redoes the delivery calculation, which updates the total purchase amount displayed on the screen. This exchange of information between the screen and the fragment results in high coupling. It is essential to assess whether the payment screen and shipping calculation belong to the same domain and if their implementation is part of the same mfe.",
      "image": "",
      "description": ""
    },
  "solution": {
      "text": "High coupling between MFEs can be effectively mitigated through event-based communication, which removes the need for direct dependencies between MFEs. Instead, interactions are handled indirectly via a centralized event store. On implementing the Publish-Subscribe (Pub-Sub) pattern, an MFE can publish an event to the browser, allowing other MFEs to subscribe and respond when the event occurs. To ensure consistency and reduce errors, it is recommended to centralize event definitions in a shared library.",
      "image": "",
      "description": ""
    }
}
